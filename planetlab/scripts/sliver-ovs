#!/bin/bash
# -*-shell-mode-*-

### expected to be run as root

COMMAND=$0

#################### helper functions

function kill_pltap_ovs () {
    killall pltap-ovs 2>/dev/null || :
}

function error {
    echo "$@" >&2
    exit 1
}

function is_switch_running {
    ovs-appctl version >/dev/null 2>&1
}

function tapname () {
    IP=$1; shift
    echo $(ip addr show to "$IP/32" | perl -ne '/^\s*\d+:\s*([\w-]+):/ && print $1')
}
    
function wait_server () {
    pid_file=$1; shift
    server_name="$@"; shift

    ## wait for it to be up - xxx todo - could use a timeout of some kind
    while [ ! -f "$pid_file" ]; do
	echo "Waiting for $server_name to start..." >&2
	sleep 1;
    done
    cat "$pid_file"
}

######################################## startup
RUN_DIR=/var/run/openvswitch
DB_CONF_FILE=/usr/etc/openvswitch/conf.db
DB_SCHEMA=/usr/share/openvswitch/vswitch.ovsschema
DB_PID_FILE=/var/run/openvswitch/ovsdb-server.pid
DB_LOG=/var/log/ovs-db.log
##
DB_SOCKET=/var/run/openvswitch/db.sock
##
SWITCH_PID_FILE=/var/run/openvswitch/ovs-vswitchd.pid
SWITCH_LOG=/var/log/ovs-switch.log

function start_db () {

    [[ -n "$@" ]] && error "Usage: $COMMAND start-db"

    ## init conf
    conf_dir=$(dirname $DB_CONF_FILE)
    [ -d $conf_dir ] || mkdir -p $conf_dir
    [ -f $DB_CONF_FILE ] || ovsdb-tool create $DB_CONF_FILE $DB_SCHEMA

    ## init run
    [ -d $RUN_DIR ] || mkdir -p $RUN_DIR

    ## check 
    [ -f $DB_CONF_FILE ] || { echo "Could not initialize $DB_CONF_FILE - exiting" ; exit 1 ; }
    [ -d $RUN_DIR ] || { echo "Could not initialize $RUN_DIR - exiting" ; exit 1 ; }

    ## run the stuff
    if [ ! -f "$DB_PID_FILE" ]; then
	ovsdb-server --remote=punix:$DB_SOCKET \
	    --remote=db:Open_vSwitch,manager_options \
	    --private-key=db:SSL,private_key \
	    --certificate=db:SSL,certificate \
	    --bootstrap-ca-cert=db:SSL,ca_cert \
	    --pidfile=$DB_PID_FILE \
	    --log-file=$DB_LOG \
	    --detach >& /dev/null
    else
	echo 'ovsdb-server appears to be running already, *not* starting'
    fi
    wait_server $DB_PID_FILE ovsdb-server
}

function stop_db () { pkill ovsdb-server; }


function start_switch () {

    [[ -n "$@" ]] && error "Usage: $COMMAND start-switch"

    if [ ! -f "$SWITCH_PID_FILE" ] ; then
	ovs-vswitchd \
	    --pidfile=$SWITCH_PID_FILE \
	    --log-file=$SWITCH_LOG \
	    --detach \
	    unix:$DB_SOCKET >& /dev/null
    else
	echo 'ovs-vswitchd appears to be running already, *not* starting'
    fi
    wait_server $SWITCH_PID_FILE ovs-vswitchd
}

function stop_switch () { pkill ovs-vswitchd ; }

function status () {
    pids=$(pgrep '^ovs')
    [ -n "$pids" ] && ps $pids
}

#################### create functions
function create_bridge () {
    
    [[ -z "$@" ]] && error "Usage: ${COMMAND} create-bridge <IP/PREFIX>"
    ip_prefix=$1; shift
    [[ -n "$@" ]] && error "Usage: ${COMMAND} create-bridge <IP/PREFIX>"

    IP=${ip_prefix%/*}
    PREFIX=${ip_prefix#*/}

    set -e
    # ensure ovs-vswitchd is running
    is_switch_running || { echo "ovs-vswitchd not running" >&2 ; exit 1 ; }

    # check whether the address is already assigned
    TAPNAME=$(tapname $IP)
    if [ ! -z "$TAPNAME" ]; then
	if ovs-vsctl br-exists "$TAPNAME"; then
	    echo $TAPNAME
	    exit 0
	fi
	kill_pltap_ovs
	error "$IP already assigned to $TAPNAME"
    fi

    # we're clear
    TAPNAME=$(pltap-ovs)
    # xxx wouldn't that be safer if left-aligned ?
    vsysc vif_up << EOF
	$TAPNAME
	$IP
	$PREFIX
EOF
    while ! ip link show up | egrep -q "^[0-9]+: +$TAPNAME:"; do
	echo "Waiting for $TAPNAME to come UP..." >&2
	sleep 1
    done
    ovs-vsctl add-br $TAPNAME -- set bridge $TAPNAME datapath_type=planetlab
    echo $TAPNAME
    return 0
}

function create_port () {

    bridge=$1; shift
    [[ -z "$@" ]] || error "$COMMAND create-port <bridge> <port>"
    port=$1; shift
    [[ -n "$@" ]] || error "$COMMAND create-port <bridge> <port>"

    set -e
    if ! ovs-vsctl list-ports "$bridge" | grep -q "^$port\$"; then
	ovs-vsctl add-port "$bridge" "$port" -- set interface "$port" type=tunnel
    fi
    ovs-appctl netdev-tunnel/get-port "$port"
    return 0
}

#################### del functions
function del_bridge () {
    
    [[ -z "$@" ]] && error "Usage: ${COMMAND} del-bridge <bridge name>"
    bridge_name=$1; shift
    [[ -n "$@" ]] && error "Usage: ${COMMAND} del-bridge <bridge name>"

    W=
    is_switch_running || W="--no-wait"

    if ovs-vsctl br-exists "$bridge_name"; then
	ovs-vsctl $W del-br $bridge_name
    fi
    return 0
}

function del_port () {
    [[ -z "$@" ]] && error "Usage: ${COMMAND} del-port <port>"
    bridge_name=$1; shift
    [[ -n "$@" ]] && error "Usage: ${COMMAND} del-port <port>"

    set -e
    if ovs-vsctl port-to-br "$1" >/dev/null 2>&1; then
	ovs-vsctl del-port "$1"
    fi
    return 0
}

####################
SUPPORTED_SUBCOMMANDS="start_db stop_db start_switch stop_switch status create_bridge create_port del_bridge del_port"

function main () {
	message="Usage: $COMMAND <subcommand> ...
Supported subcommands are (dash or underscore is the same):
$SUPPORTED_SUBCOMMANDS"
	[[ -z "$@" ]] && error "$message"

	subcommand=$1; shift
	# support dashes instead of underscores
	subcommand=$(echo $subcommand | sed -e s,-,_,)
        found=""
        for supported in $SUPPORTED_SUBCOMMANDS; do [ "$subcommand" = "$supported" ] && found=yes; done

	[ -z "$found" ] && error $message

	$subcommand "$@"
}

main "$@"
